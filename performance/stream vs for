/*
1,000 numbers in the list

FOR duration: 0 ms
500445
LAMBDA duration: 62 ms
500445

10,000 numbers

FOR duration: 1 ms
50004945
LAMBDA duration: 76 ms
50004945


100,000 numbers

FOR duration: 6 ms
705082649
LAMBDA duration: 71 ms
705082649


1,000,000 numbers

FOR duration: 11 ms
1784293609
LAMBDA duration: 78 ms
1784293609

*/
import java.util.ArrayList;
import java.util.List;

public class Stream {

    private static int sumStream(List<Integer> list) {
        return list.stream().filter(i -> i > 10).mapToInt(i -> i).sum();
    }

    private static int sumIterator(List<Integer> list) {
        int sum = 0;
        for (int i : list) {
            if (i > 10) {
                sum += i;
            }
        }
        return sum;
    }

    public static void main(String[] args) {
        int sum1, sum2 = 0;

        long n = Long.parseLong(args[0]);

        final List<Integer> nums = new ArrayList<Integer>() {
            {

                for (int i = 1; i <= n; i++) {
                    add(i);
                }
            }
        };

        long startTime1 = System.currentTimeMillis();
        sum1 = sumIterator(nums);
        long endTime1 = System.currentTimeMillis();
        System.out.println("FOR duration: " + (endTime1 - startTime1) + " ms");
        System.out.println(sum1);

        long startTime2 = System.currentTimeMillis();
        sum2 = sumStream(nums);
        long endTime2 = System.currentTimeMillis();
        System.out.println("LAMBDA duration: " + (endTime2 - startTime2) + " ms");
        System.out.println(sum2);
    }

}
